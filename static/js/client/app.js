class ContactFormHandler {
    constructor() {
        this.csrfToken = null;
        this.csrfTokenExpiry = null;
        this.API_BASE = '/api/v1';
        this.form = document.getElementById('contactForm');
        this.submitBtn = document.getElementById('submitBtn');
        this.csrfStatus = document.getElementById('csrfStatus');
        this.phoneInput = document.getElementById('phone');

        this.init();
    }

    async init() {
        await this.loadCsrfToken();
        this.setupEventListeners();
        this.startTokenRefreshTimer();
        this.setupPhoneMask();
    }

    setupPhoneMask() {
        const phoneInput = this.phoneInput;
        
        phoneInput.addEventListener('input', function(e) {
            const value = phoneInput.value.replace(/\D/g, '');
            let formattedValue = '';
            
            if (value.length > 0) {
                formattedValue = '(' + value.substring(0, 3);
            }
            if (value.length > 3) {
                formattedValue += ') ' + value.substring(3, 6);
            }
            if (value.length > 6) {
                formattedValue += '-' + value.substring(6, 8);
            }
            if (value.length > 8) {
                formattedValue += '-' + value.substring(8, 10);
            }
            
            phoneInput.value = formattedValue;
        });

        phoneInput.addEventListener('keydown', function(e) {
            // backspace, delete, tab, escape, enter
            if ([46, 8, 9, 27, 13].includes(e.key) || 
                // Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X
                (e.key === 65 && e.ctrlKey === true) || 
                (e.key === 67 && e.ctrlKey === true) ||
                (e.key === 86 && e.ctrlKey === true) ||
                (e.key === 88 && e.ctrlKey === true)) {
                return;
            }
            
            // –ó–∞–ø—Ä–µ—â–∞–µ–º –Ω–µ-—Ü–∏—Ñ—Ä—ã
            if ((e.key < 48 || e.key > 57) && (e.key < 96 || e.key > 105)) {
                e.preventDefault();
            }
        });
    }

    async loadCsrfToken() {
        try {
            const response = await fetch(`${this.API_BASE}/csrf-token`, {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'Accept': 'application/json',
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            this.csrfToken = data.token;
            this.csrfTokenExpiry = Date.now() + (data.expires_in * 1000);
            
            this.updateCsrfStatus(true);
            this.submitBtn.disabled = false;
            
            console.log('‚úÖ CSRF token loaded successfully');
            
        } catch (error) {
            console.error('‚ùå Failed to load CSRF token:', error);
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å meta-—Ç–µ–≥ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            const metaToken = document.querySelector('meta[name="csrf-token"]')?.content;
            if (metaToken) {
                this.csrfToken = metaToken;
                this.updateCsrfStatus(true);
                this.submitBtn.disabled = false;
                console.warn('‚ö†Ô∏è Using fallback CSRF token from meta tag');
            } else {
                this.updateCsrfStatus(false, error.message);
                this.submitBtn.disabled = true;
            }
        }
    }

    updateCsrfStatus(success, errorMessage = null) {
        if (success) {
            this.csrfStatus.className = 'csrf-status csrf-ready';
        } else {
            this.csrfStatus.className = 'csrf-status csrf-error';
        }
    }

    startTokenRefreshTimer() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        setInterval(async () => {
            if (this.csrfTokenExpiry && Date.now() > (this.csrfTokenExpiry - 5 * 60 * 1000)) {
                console.log('üîÑ Refreshing CSRF token...');
                await this.loadCsrfToken();
            }
        }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }

    setupEventListeners() {
        this.form.addEventListener('submit', (e) => this.handleSubmit(e));
        document.getElementById('name').addEventListener('blur', () => this.validateField('name'));
        document.getElementById('email').addEventListener('blur', () => this.validateField('email'));
        document.getElementById('phone').addEventListener('blur', () => this.validateField('phone'));
        document.getElementById('message').addEventListener('blur', () => this.validateField('message'));
    }

    showError(fieldId, message) {
        const errorElement = document.getElementById(`${fieldId}-error`);
        errorElement.textContent = message;
        errorElement.style.display = 'block';
    }

    hideError(fieldId) {
        const errorElement = document.getElementById(`${fieldId}-error`);
        errorElement.textContent = '';
        errorElement.style.display = 'none';
    }

    resetErrors() {
        document.querySelectorAll('.error').forEach(el => {
            el.textContent = '';
            el.style.display = 'none';
        });
    }

    validateField(fieldId) {
        const field = document.getElementById(fieldId);
        const value = field.value.trim();
        
        switch(fieldId) {
            case 'name':
                if (!/^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-']{2,50}$/.test(value)) {
                    this.showError(fieldId, '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 2-50 –±—É–∫–≤–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤');
                    return false;
                }
                break;
                
            case 'email':
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailRegex.test(value)) {
                    this.showError(fieldId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
                    return false;
                }
                break;
                
            case 'phone':
                if (value) {
                    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –≤–µ–¥—É—â–µ–≥–æ +
                    const digits = value.replace(/\D/g, '');
                    
                    // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 10 —Ü–∏—Ñ—Ä (—Ç.–∫. –ø—Ä–µ—Ñ–∏–∫—Å +7 —É–∂–µ —É–∫–∞–∑–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ)
                    if (digits.length !== 10) {
                        this.showError(fieldId, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ 10 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–º–µ—Ä: (999) 999-99-99');
                        return false;
                    }
                }
                break;
                
            case 'message':
                if (value.length < 10 || value.length > 1000) {
                    this.showError(fieldId, '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 10-1000 —Å–∏–º–≤–æ–ª–æ–≤');
                    return false;
                }
                break;
        }
        
        this.hideError(fieldId);
        return true;
    }

    validateForm() {
        this.resetErrors();
        let isValid = true;

        const honeypot = document.getElementById('honeypot').value;
        if (honeypot) {
            console.warn('ü§ñ Bot detected via honeypot');
            return false;
        }

        ['name', 'email', 'phone', 'message'].forEach(fieldId => {
            if (!this.validateField(fieldId)) {
                isValid = false;
            }
        });

        return isValid;
    }

    async handleSubmit(e) {
        e.preventDefault();
        
        if (!this.validateForm()) {
            console.warn('üìù Form validation failed');
            return;
        }

        if (!this.csrfToken) {
            this.showResponse('error', '‚ùå CSRF —Ç–æ–∫–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
            return;
        }

        const formData = {
            name: document.getElementById('name').value.trim(),
            email: document.getElementById('email').value.trim(),
            phone: document.getElementById('phone').value.trim() || null,
            message: document.getElementById('message').value.trim()
        };

        this.setSubmitState(true);

        try {
            const response = await fetch(`${this.API_BASE}/contact-submissions`, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': this.csrfToken,
                    'Accept': 'application/json',
                },
                body: JSON.stringify(formData)
            });

            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            const responseText = await response.text();
            
            let result;
            try {
                // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                result = JSON.parse(responseText);
            } catch (jsonError) {
                // –ï—Å–ª–∏ –Ω–µ JSON - —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
                result = {
                    message: responseText || `HTTP Error: ${response.status}`,
                    code: 'INVALID_RESPONSE'
                };
            }

            if (response.ok) {
                this.showResponse('success', 
                    `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!<br>
                        <p>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.</p>
                        <p>ID –∑–∞—è–≤–∫–∏: <strong>${result.submission_id}</strong></p>
                        <p>–ù–∞ –≤–∞—à email <strong>${formData.email}</strong> –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.</p>`
                );
                this.form.reset();
                this.resetErrors();
            } else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                let fieldErrors = '';
                
                if (result.code === "VALIDATION_ERROR") {
                    if (result.message.includes("–ò–º—è")) {
                        this.showError('name', result.message);
                    } else if (result.message.includes("email")) {
                        this.showError('email', result.message);
                    } else if (result.message.includes("–°–æ–æ–±—â–µ–Ω–∏–µ")) {
                        this.showError('message', result.message);
                    }
                    fieldErrors = `<p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π</p>`;
                }
                
                // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                if (result.errors) {
                    result.errors.forEach(error => {
                        this.showError(error.field, error.message);
                        fieldErrors += `<p>${error.field}: ${error.message}</p>`;
                    });
                }
                
                this.showResponse('error', 
                    `‚ùå –û—à–∏–±–∫–∞: ${result.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}<br>
                        <p>–ö–æ–¥ –æ—à–∏–±–∫–∏: ${result.code || 'UNKNOWN'}</p>
                        ${fieldErrors}`
                );
            }

        } catch (error) {
            console.error('üåê Network error:', error);
            this.showResponse('error', 
                `‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞<br>
                    <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</p>
                    <p>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${error.message}</p>`
            );
        } finally {
            this.setSubmitState(false);
        }
    }

    setSubmitState(isSubmitting) {
        this.submitBtn.disabled = isSubmitting;
        this.submitBtn.textContent = isSubmitting ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ';
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å—é —Ñ–æ—Ä–º—É –Ω–∞ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        this.form.querySelectorAll('input, textarea, button').forEach(el => {
            if (el !== this.submitBtn) {
                el.disabled = isSubmitting;
            }
        });
    }

    showResponse(type, message) {
        const responseElement = document.getElementById('responseMessage');
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        responseElement.innerHTML = '';
        
        const messageDiv = document.createElement('div');
        messageDiv.className = type;
        messageDiv.innerHTML = message;
        responseElement.appendChild(messageDiv);
        
        responseElement.style.display = 'block';
        responseElement.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        
        if (type === 'success') {
            setTimeout(() => {
                responseElement.style.display = 'none';
            }, 10000);
        }
    }
}

document.addEventListener('DOMContentLoaded', () => {
    new ContactFormHandler();
});